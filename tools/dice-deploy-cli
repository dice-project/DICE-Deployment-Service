#!/usr/bin/env python2

from __future__ import print_function

import argparse
import logging
import inspect
import json
import time
import sys
import os

import requests

# Logging
fmt_stream = logging.Formatter("[%(levelname)s] - %(message)s")
handler_stream = logging.StreamHandler()
handler_stream.setFormatter(fmt_stream)
handler_stream.setLevel(logging.INFO)

fmt_file = logging.Formatter(
    "%(asctime)s %(name)s:%(lineno)s [%(levelname)s] - %(message)s"
)
handler_file = logging.FileHandler(".dds.log")
handler_file.setFormatter(fmt_file)
handler_file.setLevel(logging.DEBUG)

logger = logging.getLogger("dds-client")
logger.addHandler(handler_stream)
logger.addHandler(handler_file)
logger.setLevel(logging.DEBUG)


# Helpers
def fail(msg, *args):
    logger.error(msg.format(*args))
    sys.exit(1)


class ArgParser(argparse.ArgumentParser):
    """
    Argument parser that displays help on error
    """

    def error(self, message):
        sys.stderr.write("error: {}\n".format(message))
        self.print_help()
        sys.exit(2)


class Config:

    valid_keys = {"url", "token", "cacert"}
    invalid_key_msg = "Invalid settings key: {}"

    def __init__(self, data={}):
        invalid = [k for k in data.keys() if k not in self.valid_keys]
        if len(invalid) != 0:
            fail("Invalid settings key(s) found: {}", ",".join(invalid))

        # If no certificate is present, requests should validate it against
        # system certificates.
        self.cacert = True

        for k, v in data.items():
            setattr(self, k, v)

    def save(self, path):
        data = {k: getattr(self, k)
                for k in self.valid_keys if hasattr(self, k)}
        with open(path, "wb") as f:
            json.dump(data, f, indent=2)

    @staticmethod
    def load_from_file(path, fail_on_missing=False):
        try:
            with open(path) as f:
                data = json.load(f)
        except IOError:
            if fail_on_missing:
                fail("File {} is missing", path)
            data = {}  # Missing file simply means no settings are present yet
        except:
            fail("File {} is not valid JSON", path)
        return Config(data)


# Commands
class Command(object):

    @staticmethod
    def add_subparser(subparsers):
        raise NotImplementedError("Command is an abstract class")

    def __init__(self, args, fail_on_missing_config=True):
        self.config = Config.load_from_file(args.config,
                                            fail_on_missing_config)
        self.args = args

    def execute(self):
        raise NotImplementedError("Command is an abstract class")

    def check_endpoint(self):
        logger.info("Checking DICE Deployment Service URL")
        url = self.config.url
        try:
            resp = requests.get("{}/heartbeat".format(url),
                                verify=self.config.cacert)
            logger.debug(resp.content)
        except requests.exceptions.SSLError as e:
            logger.debug(e)
            fail("Invalid certificate. Forgot to run 'cacert' command?")
        except Exception as e:
            logger.debug(e)
            fail("URL '{}' is not valid", url)
        if resp.status_code != 200:
            fail("URL '{}' did not respond properly", url)
        try:
            message = resp.json()["msg"]
        except Exception as e:
            logger.debug(e)
            fail("URL '{}' did not return valid JSON", url)
        if message != "DICE Deployment Service Heart Beat":
            fail("URL '{}' does not point to deployment service", url)

    def check_auth(self):
        logger.info("Checking DICE Deployment Service authentication data")
        resp = self.get("/containers")
        if resp.status_code == 401:
            fail("Authorization token is invalid")

    def request(self, method, endpoint, auth, **kwargs):
        # Add authentication header
        headers = kwargs.get("headers", {})
        if auth:
            headers = headers.copy()
            headers["Authorization"] = "Token {}".format(self.config.token)
            kwargs["headers"] = headers
        # Execute call
        url = "{}{}".format(self.config.url, endpoint)
        resp = method(url, verify=self.config.cacert, **kwargs)
        logger.debug(resp.content)
        return resp

    def get(self, endpoint, auth=True, **kwargs):
        return self.request(requests.get, endpoint, auth, **kwargs)

    def post(self, endpoint, auth=True, **kwargs):
        return self.request(requests.post, endpoint, auth, **kwargs)

    def put(self, endpoint, auth=True, **kwargs):
        return self.request(requests.put, endpoint, auth, **kwargs)

    def delete(self, endpoint, auth=True, **kwargs):
        return self.request(requests.delete, endpoint, auth, **kwargs)


class Cacert(Command):

    @staticmethod
    def add_subparser(subparsers):
        parser = subparsers.add_parser(
            "cacert", help="Set DICE Deployment Service server certificate"
        )
        parser.add_argument("cert", help="Server certificate",
                            type=argparse.FileType("rb"))
        return parser

    def __init__(self, args):
        super(Cacert, self).__init__(args, fail_on_missing_config=False)

    def check_endpoint(self):
        pass  # Check can only be done from execute method

    def check_auth(self):
        pass  # Check can only be done from execute method

    def execute(self):
        logger.info("Settings server certificate")
        path = os.path.abspath(os.path.expanduser(self.args.cert.name))
        self.config.cacert = path
        if hasattr(self.config, "url"):
            super(Cacert, self).check_endpoint()
        self.config.save(self.args.config)
        logger.info("Server certificate set successfully")


class Use(Command):

    @staticmethod
    def add_subparser(subparsers):
        parser = subparsers.add_parser("use",
                                       help="Set DICE Deployment Service URL")
        parser.add_argument("url", help="Service address")
        return parser

    def __init__(self, args):
        super(Use, self).__init__(args, fail_on_missing_config=False)

    def check_endpoint(self):
        pass  # Check can only be done from execute method

    def check_auth(self):
        pass  # We need to override this method since auth is not needed

    def execute(self):
        logger.info("Trying to set DICE Deployment Service URL")
        self.config.url = self.args.url.rstrip("/")
        super(Use, self).check_endpoint()
        self.config.save(self.args.config)
        logger.info("URL set successfully")


class Authenticate(Command):

    @staticmethod
    def add_subparser(subparsers):
        parser = subparsers.add_parser("authenticate",
                                       help="Obtain authentication token")
        parser.add_argument("username",
                            help="Username used to log into service")
        parser.add_argument("password",
                            help="Password used to log into service")
        return parser

    def check_auth(self):
        pass  # We need to override this method since auth is being obtained

    def execute(self):
        logger.info("Authenticating")
        data = {"username": self.args.username, "password": self.args.password}
        response = self.post("/auth/get-token", auth=False, json=data)
        if response.status_code != 200:
            fail("Cannot authenticate with provided credentials")

        self.config.token = response.json()["token"]
        self.config.save(self.args.config)
        logger.info("Authorization succeeded")


class List(Command):

    @staticmethod
    def add_subparser(subparsers):
        parser = subparsers.add_parser(
            "list", help="List available containers"
        )
        return parser

    def execute(self):
        logger.info("Getting container list")
        response = self.get("/containers")
        if response.status_code != 200:
            fail("Cannot retrieve containers")
        for container in response.json():
            print("{}: {}".format(container["id"],
                                  container["description"].encode("utf-8")))
        logger.info("Container list successfully obtained")


class ContainerInfo(Command):

    @staticmethod
    def add_subparser(subparsers):
        parser = subparsers.add_parser(
            "container-info", help="Report container status",
        )
        parser.add_argument("uuid", help="Container UUID")
        return parser

    def execute(self):
        uuid = self.args.uuid
        logger.info("Getting information about container {}".format(uuid))
        response = self.get("/containers/{}".format(uuid))
        if response.status_code != 200:
            fail("Cannot retrieve container info")
        print(response.content)
        logger.info("Information successfully obtained")


class Create(Command):

    @staticmethod
    def add_subparser(subparsers):
        parser = subparsers.add_parser("create", help="Create new container")
        parser.add_argument("description",
                            help="Container description")
        return parser

    def execute(self):
        logger.info("Creating new container")
        response = self.post("/containers",
                             json=dict(description=self.args.description))
        if response.status_code != 201:
            fail("Cannot create container")
        print(response.json()["id"])
        logger.info("Successfully created new container")


class Delete(Command):

    @staticmethod
    def add_subparser(subparsers):
        parser = subparsers.add_parser("delete", help="Delete container")
        parser.add_argument("uuid", help="Container UUID")
        return parser

    def execute(self):
        uuid = self.args.uuid
        logger.info("Deleting container {}".format(uuid))
        response = self.delete("/containers/{}".format(uuid))
        if response.status_code != 204:
            fail("Container deletion failed")
        logger.info("Deletion succeeded")


class Deploy(Command):

    @staticmethod
    def add_subparser(subparsers):
        parser = subparsers.add_parser("deploy",
                                       help="Deploy blueprint in container")
        parser.add_argument("--register-app", dest="register",
                            action="store_const", const=True, default=False,
                            help="Register application with DMon")
        parser.add_argument("uuid", help="Container UUID")
        parser.add_argument("package",
                            help="Blueprint (tar.gz package ot YAML file)",
                            type=argparse.FileType("rb"))
        return parser

    def execute(self):
        uuid = self.args.uuid
        logger.info("Starting blueprint deployment")
        response = self.post("/containers/{}/blueprint".format(uuid),
                             files=dict(file=self.args.package),
                             params=dict(register_app=self.args.register))
        if response.status_code != 202:
            fail("Cannot start deploy")
        logger.info("Successfully started new deploy")


class Teardown(Command):

    @staticmethod
    def add_subparser(subparsers):
        parser = subparsers.add_parser("teardown",
                                       help="Remove deployment from container")
        parser.add_argument("uuid", help="Container UUID")
        return parser

    def execute(self):
        uuid = self.args.uuid
        logger.info("Removing deployment from container {}".format(uuid))
        response = self.delete("/containers/{}/blueprint".format(uuid))
        if response.status_code != 202:
            fail("Deployment teardown cannot start")
        logger.info("Deployment removal started successfully")


class SetInputs(Command):

    @staticmethod
    def add_subparser(subparsers):
        parser = subparsers.add_parser("set-inputs",
                                       help="Set service inputs")
        parser.add_argument("inputs",
                            help="JSON file with inputs",
                            type=argparse.FileType())
        return parser

    def execute(self):
        logger.info("Replacing service inputs")
        try:
            data = json.load(self.args.inputs)
            response = self.post("/inputs", json=data)
        except:
            fail("Invalid data file passed as parameter")
        if response.status_code != 201:
            fail("Invalid data file passed as parameter")
        logger.info("Successfully updated inputs")


class GetInputs(Command):

    @staticmethod
    def add_subparser(subparsers):
        parser = subparsers.add_parser("get-inputs",
                                       help="Set service inputs")
        return parser

    def execute(self):
        logger.info("Getting service inputs")
        response = self.get("/inputs")
        print(json.dumps(response.json(), indent=2))
        logger.info("Successfully obtained inputs")


class WaitForDeploy(Command):

    @staticmethod
    def add_subparser(subparsers):
        parser = subparsers.add_parser(
            "wait-deploy", help="Wait for deploy termination",
            formatter_class=argparse.ArgumentDefaultsHelpFormatter
        )
        parser.add_argument("uuid", help="Container UUID")
        parser.add_argument("--poll-interval", default=5, type=int,
                            help="Poll interval in seconds")
        return parser

    def execute(self):
        logger.info("Waiting for deployment to terminate")

        endpoint = "/containers/{}".format(self.args.uuid)
        response = self.get(endpoint)
        if response.status_code != 200:
            fail("Cannot retrieve container info")
        data = response.json()

        while data["busy"]:
            msg = "Container busy, blueprint is {}"
            if data["blueprint"] is None:
                logger.info(msg.format("not present"))
            else:
                logger.info(msg.format(data["blueprint"]["state_name"]))
            time.sleep(self.args.poll_interval)
            response = self.get(endpoint)
            if response.status_code != 200:
                fail("Cannot retrieve container info")
            data = response.json()

        if data["blueprint"] and data["blueprint"]["in_error"]:
            fail("Deployment terminated in error")
        logger.info("Deployment is done")


class Outputs(Command):

    @staticmethod
    def add_subparser(subparsers):
        parser = subparsers.add_parser(
            "outputs", help="Obtain outputs from container",
            formatter_class=argparse.ArgumentDefaultsHelpFormatter
        )
        parser.add_argument("uuid", help="Container UUID")

        return parser

    def execute(self):
        uuid = self.args.uuid
        logger.info("Obtaining outputs for container {}".format(uuid))
        response = self.get("/containers/{}".format(uuid))
        if response.status_code != 200:
            fail("Cannot retrieve container info")
        blueprint = response.json()["blueprint"]
        outputs = {"outputs": blueprint["outputs"]} if blueprint else {}
        print(json.dumps(outputs))
        logger.info("Information successfully obtained")


class Status(Command):

    @staticmethod
    def add_subparser(subparsers):
        parser = subparsers.add_parser(
            "status", help="Obtain container status",
            formatter_class=argparse.ArgumentDefaultsHelpFormatter
        )
        parser.add_argument("uuid", help="Container UUID")

        return parser

    def execute(self):
        uuid = self.args.uuid
        logger.info("Obtaining status for container {}".format(uuid))
        response = self.get("/containers/{}".format(uuid))
        if response.status_code != 200:
            fail("Cannot retrieve container info")
        blueprint = response.json()["blueprint"]
        print(blueprint["state_name"] if blueprint else "empty")
        logger.info("Information successfully obtained")


class Instances(Command):

    @staticmethod
    def add_subparser(subparsers):
        parser = subparsers.add_parser(
            "list-instances", help="List VM instances in container",
            formatter_class=argparse.ArgumentDefaultsHelpFormatter
        )
        parser.add_argument("uuid", help="Container UUID")

        return parser

    def execute(self):
        uuid = self.args.uuid
        logger.info("Obtaining VM instances for container {}".format(uuid))
        response = self.get("/containers/{}/nodes".format(uuid))
        if response.status_code != 200:
            fail("Cannot retrieve VM instances for container")
        print(json.dumps(response.json(), indent=2))
        logger.info("Information successfully obtained")


# Entry point
def create_parser():
    def is_command(item):
        return (inspect.isclass(item) and item != Command and
                issubclass(item, Command))

    parser = ArgParser(description="DICE Deployment Service CLI",
                       formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument("--config", help="Configuration file to use",
                        default=".dds.conf")
    subparsers = parser.add_subparsers()

    commands = inspect.getmembers(sys.modules[__name__], is_command)
    for _, cls in commands:
        sub = cls.add_subparser(subparsers)
        sub.set_defaults(cls=cls)

    return parser


def execute_command(cmd):
    cmd.check_endpoint()
    cmd.check_auth()
    cmd.execute()


def main():
    parser = create_parser()
    args = parser.parse_args()
    execute_command(args.cls(args))


if __name__ == "__main__":
    main()

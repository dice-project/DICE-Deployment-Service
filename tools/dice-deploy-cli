#!/bin/bash

# ########################################################################## #
# Global configuration                                                       #
# ########################################################################## #

# Url of dice deployment service
DICE_DEPLOY_URL_FILE=".dice-deploy-url"
# The authentication token
DICE_DEPLOY_AUTH_TOKEN_FILE=".dice-deploy-auth"
# Blueprint ID field
CST_BLUEPRINT_ID_FIELD="id"

# ########################################################################## #
# Helper functions for various tasks                                         #
# ########################################################################## #

# Log things to stderr (be pipe-friendly)
function log ()
{
  echo "$1" >&2
}

# Read the token from the file. Use authenticate function to create one
function get-authentication ()
{
  if [[ -f "$DICE_DEPLOY_AUTH_TOKEN_FILE" ]]
  then
    cat $DICE_DEPLOY_AUTH_TOKEN_FILE
  else
    log "Authentication required. Please run:"
    log "  $0 authenticate USERNAME PASSWORD"
    log ""
    exit -2
  fi
}

# Check if the service URL is set
function get-service-url ()
{
  if [[ -n $DICE_DEPLOY ]]
  then
    echo $DiCE_DEPLOY
  elif [[ -f "$DICE_DEPLOY_URL_FILE" ]]
  then
    cat $DICE_DEPLOY_URL_FILE
  else
    log "DICE deployment service URL not set. Please run:"
    log "  $0 use SERVICE_ADDRESS"
    exit -3
  fi
}

# Wrapper around curl that adds authentication header, provides proper
# switches and checks return value.
function request-impl ()
{
  local auth=$1 && shift
  local method=${1^^} && shift
  local endpoint=$1 && shift

  local out

  case $method in
    GET|POST|PUT|DELETE|PATCH) ;;
    *)
      echo "Unsupported method: '$method'."
      exit 1;
      ;;
  esac
  local url="$(get-service-url)${endpoint}"

  if [[ $auth == "yes" ]]
  then
    local token=$(get-authentication)
    out=$(curl -s -S -f -k -X $method -H "Authorization: Token $token" \
      "$@" "$url" 2>&1)
  else
    out=$(curl -s -S -f -k -X $method "$@" "$url" 2>&1)
  fi

  if [[ $? -ne 0 ]]
  then
    log "Request failed:"
    log
    log "$out"
    exit -1
  fi
  echo "$out"
}

function request-noauth ()
{
  request-impl "no" "$@"
}

function request ()
{
  request-impl "yes" "$@"
}

# ########################################################################## #
# Main script executors (help system and dispatch function)                  #
# ########################################################################## #

# Output the usage of the tool
function usage ()
{
  log "Usage:"

  if [[ -z "$1" ]]
  then
    log "$0 ACTION [PARAM ...]"
    log
    log "Available actions:"
    for doc in "${DOCS[@]}"
    do
      echo "$doc" | sed -n 2p
    done | sort >&2
  else
    log "${DOCS[$1]}"
  fi
}

# Main action dispatch
function dispatch ()
{
  # Make sure that any overrides come first in case
  local action=$1 && shift
  func=${ACTIONS[$action]}
  if [[ "x$func" == "x" ]]
  then
    log "Unknown command: '$action'"
    usage
    exit 1
  fi
  if [[ $# -lt ${PARAMS[$action]} ]]
  then
    log "Bad number of arguments: $# (expected ${PARAMS[$action]})"
    usage $action
    exit 1
  fi
  $func "$@"
}

# ########################################################################## #
# Supported actions (with provided documentation)                            #
# ########################################################################## #

# List of valid actions and associated functions with docs
declare -A ACTIONS
declare -A PARAMS
declare -A DOCS

# Actual functionality definition
ACTIONS[help]=usage
PARAMS[help]=0
DOCS[help]="
  help: display help
    parameters: [command]
    example: $0 help
    example: $0 help deploy
"

ACTIONS[use]=use
PARAMS[use]=1
DOCS[use]="
  use: use the URL as the DICE deployment service URL
    parameters: url
    example: $0 use http://109.231.122.46:8000
"
function use ()
{
  local url=${1%\/}

  log "Using $1 as the URL for the DICE deployment tool service"
  # We don't use request helpers here because we have no url fixed
  curl -s -S -k -f "${url}/docs" &> /dev/null
  if [[ $? -ne 0 ]]
  then
    log "Connection to $1 failed. We will not use this URL."
    log
    exit -1
  fi
  log

  echo "$url" > $DICE_DEPLOY_URL_FILE
}

ACTIONS[authenticate]=authenticate
PARAMS[authenticate]=2
DOCS[authenticate]="
  authenticate: provide username and password to obtain the authentication
                token
    parameters: username password
    example: $0 authenticate testuser 123456
"
function authenticate ()
{
  log "Obtaining the authentication token"
  out=$(request-noauth post /auth/get-token -d "username=${1}&password=${2}")
  token=$(echo $out | grep -Po '(?<="'token'":")[^"]*')
  echo $token > "$DICE_DEPLOY_AUTH_TOKEN_FILE"
  log "Authenticated"
}

ACTIONS[create]=create-container
PARAMS[create]=0
DOCS[create]="
  create: creates a new container
    parameters: description (optional)
    returns: container-uuid
    example: $0 create
    example: $0 create \"Smart Energy streaming application\"
"
function create-container ()
{
  log -n "Creating a new container ... "
  out=$(request post /containers -d "description=$1")
  uuid=$(echo $out | grep -Eo '"[0-9A-Fa-f-]+"' | grep -Eo '[0-9A-Fa-f-]+')
  log "DONE."
  echo "Container UUID: $uuid"
}

ACTIONS[delete]=delete-container
PARAMS[delete]=1
DOCS[delete]="
  delete: deletes an existing container
    parameters: container-uuid
    example: $0 delete 14132d9b-d86d-48e9-a24c-deb949d9f3d7
"
function delete-container ()
{
  log -n "Deleting deployment ... "
  request delete /containers/$1
  log "DONE."
}

ACTIONS[deploy]=deploy
PARAMS[deploy]=2
DOCS[deploy]="
  deploy: creates a new deployment in the container
    parameters: container-uuid package-file-name
    returns: deployment-uuid
    example: $0 deploy 14132d9b-d86d-48e9-a24c-deb949d9f3d7 pi-cluster.tar.gz
"
function deploy ()
{
  CONTAINER_UUID="$1"
  FILE_NAME="$2"

  log -n "Creating a new deployment ... "
  out=$(request post /containers/$1/blueprint -F "file=@$2")
  uuids=$(echo $out | grep -Po '(?<="'$CST_BLUEPRINT_ID_FIELD'":")[^"]*')
  log "DONE."
  # there are two UUIDs: one is from the container, the other one from deploy
  for uuid in $uuids
  do
    if [ "$uuid" != "$CONTAINER_UUID" ]
    then
      echo "Deployment UUID: $uuid"
    fi
  done
}

ACTIONS[container-info]=container-info
PARAMS[container-info]=1
DOCS[container-info]="
  container-info: reports container state
    parameters: container-uuid
    returns: container information
    example: $0 container-info b8af9e0b-ec5a-408f-8ad8-0a754b47c976
"
function container-info ()
{
  log -n "Obtaining the container details ..."
  out=$(request get /containers/$1)
  log "DONE."
  echo $out
}

ACTIONS[teardown]=teardown
PARAMS[teardown]=1
DOCS[teardown]="
  teardown: uninstalls and deletes an existing deployment
    parameters: deployment-uuid
    example: $0 teardown 8f151bb0-db92-48e1-88a0-397258e01f11
"
function teardown ()
{
  log -n "Deleting deployment ... "
  request delete /blueprints/$1
  log "DONE."
}

ACTIONS[extract-deploy-id]=extract-deploy-id
PARAMS[extract-deploy-id]=1
DOCS[extract-deploy-id]="
  extract-deploy-id: get deployment ID from selected container
    parameters: container-uuid
    example: $0 extract-deploy-id b8af9e0b-ec5a-408f-8ad8-0a754b47c976
"
function extract-deploy-id ()
{
  out=$(container-info $1 | tail -n 1)
  ids=$(echo $out | grep -Po '(?<="'$CST_BLUEPRINT_ID_FIELD'":")[^"]*')

  # grep isn't good at discerning between nested-in ids and the
  # ids of the parent, so this is a hack to get the right one out
  for id in $ids
  do
    if [ "$id" != "$1" ]
    then
      echo $id
      return
    fi
  done
}

ACTIONS[status]=deployment-status
PARAMS[status]=1
DOCS[status]="
  status: get deployment status
    parameters: deployment-uuid
    returns: the deployment's current status
    example: $1 status 8f151bb0-db92-48e1-88a0-397258e01f11
"
function deployment-status ()
{
  log "Obtaining deployment status ..."
  out=$(request get /blueprints/$1)
  status=$(echo "${out}" | grep -Po '(?<="state_name":")[^"]*')
  echo "$status"
}

ACTIONS[wait-deploy]=wait-deploy
PARAMS[wait-deploy]=1
DOCS[wait-deploy]="
  wait-deploy: after calling deploy, this will block until deploy finishes
    parameters: container-uuid
    example: $1 wait-deploy 14132d9b-d86d-48e9-a24c-deb949d9f3d7
"
function wait-deploy ()
{
  DEPLOYMENT_UUID=$(extract-deploy-id $1)

  status=$(deployment-status $DEPLOYMENT_UUID | tail -n 1)
  while [[ ( "$status" != "deployed" ) && \
          ( "$status" != "request_failed" ) && \
          ( "$status" != "error") ]]
  do
    if [ "$?" != "0" ]
    then
      exit -3
    fi
    log "Current status: $status"
    sleep 5
    status=$(deployment-status $DEPLOYMENT_UUID | tail -n 1)
  done
  if [[ ( "$status" == "error" ) ]]
  then
    exit -3
  fi
}

ACTIONS[outputs]=outputs
PARAMS[outputs]=1
DOCS[outputs]="
  outputs: get deployment parameters
    parameters: container-uuid
    returns: dict of deployment parameters
    example: $0 outputs 14132d9b-d86d-48e9-a24c-deb949d9f3d7
"
function outputs ()
{
  local blueprint=$(extract-deploy-id $1)
  request get /blueprints/$blueprint/outputs
}

ACTIONS[nodes]=node-list
PARAMS[nodes]=1
DOCS[nodes]="
  nodes: get a list of nodes and their properties in the container
    parameters: container-uuid [raw]
    returns: list of dictionaries of node properties
    example: $0 nodes 14132d9b-d86d-48e9-a24c-deb949d9f3d7
"
function node-list ()
{
  request get /containers/$1/nodes/?$2
}

ACTIONS[node-ips]=node-list-ips
PARAMS[node-ips]=1
DOCS[node-ips]="
  node-ips (DEPRECATED): get a list of node IP host addresses in the container
    parameters: container-uuid
    returns: list of dictionaries of node properties
    example: $0 node-ips 14132d9b-d86d-48e9-a24c-deb949d9f3d7
    replacement: use nodes with second parameter set to \"raw\"
"
function node-list-ips ()
{
  request get /containers/$1/nodes/?raw
}


# Parameter check
if [[ $# -eq 0 ]]
then
  usage
  exit 0
fi

dispatch "$@"
